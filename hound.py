import discord
from discord.ext import commands
from discord.ui import Button, View, Modal, TextInput
import json
import os
from datetime import datetime

bot = commands.Bot(command_prefix="!", intents=discord.Intents.all())

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
try:
    script_dir = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(script_dir, 'token_hound.json')
    
    with open(config_path, 'r', encoding='utf-8') as x:
        config = json.load(x)
        
    TARGET_CHANNEL_ID = int(config['target_channel_id'])
    RECRUITER_ROLE_ID = int(config['recruiter_role_id'])
    ACCEPTED_ROLE_ID = int(config['accepted_role_id'])
    LOGS_CHANNEL_ID = int(config['logs_channel_id'])
    APPLICATIONS_CHANNEL_ID = int(config['applications_channel_id'])
    
except FileNotFoundError:
    print("Error: token_hound.json file not found!")
    exit()
except json.JSONDecodeError:
    print("Error: token_hound.json contains invalid JSON!")
    exit()
except PermissionError:
    print("Error: Permission denied when trying to read token_hound.json!")
    exit()
except KeyError as e:
    print(f"Error: Missing required key in config: {e}")
    exit()
except ValueError as e:
    print(f"Error: Invalid ID format in config: {e}")
    exit()

class ApplicationForm(Modal, title="–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏"):
    online = TextInput(
        label="–í–∞—à –æ–Ω–ª–∞–π–Ω (—Å–∫–æ–ª—å–∫–æ –≤—ã –æ–±—ã—á–Ω–æ –∏–≥—Ä–µ—Ç–µ –≤ –¥–µ–Ω—å)",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 3-6—á",
        required=True
    )
    
    age = TextInput(
        label="–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 21",
        required=True
    )
    
    source = TextInput(
        label="–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç –¥—Ä—É–≥–∞, —Å –º–∞—Ä–∫–µ—Ç–∞ –∏ —Ç.–¥.",
        required=True
    )
    
    stats_id = TextInput(
        label="–í–∞—à —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π ID (—Å—Ç–∞—Ç–∏–∫)",
        required=True
    )

    async def on_submit(self, interaction: discord.Interaction):
        embed = discord.Embed(
            title="üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
            description=f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {interaction.user.mention}",
            color=0x3498db,
            timestamp=datetime.now()
        )
        
        embed.add_field(name="üïí –û–Ω–ª–∞–π–Ω", value=self.online.value, inline=False)
        embed.add_field(name="üéÇ –í–æ–∑—Ä–∞—Å—Ç", value=self.age.value, inline=False)
        embed.add_field(name="üîç –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏", value=self.source.value, inline=False)
        if self.stats_id.value:
            embed.add_field(name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π ID", value=self.stats_id.value, inline=False)
        
        embed.set_thumbnail(url=interaction.user.display_avatar.url)
        embed.set_author(name=str(interaction.user), icon_url=interaction.user.display_avatar.url)
        embed.set_footer(text=f"ID: {interaction.user.id}")

        target_channel = bot.get_channel(TARGET_CHANNEL_ID)
        if target_channel:
            msg = await target_channel.send(
                content=f"<@&{RECRUITER_ROLE_ID}> –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!",
                embed=embed
            )
            view = ApplicationView(interaction.user, msg)
            await msg.edit(view=view)
        
        await interaction.response.send_message(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
            ephemeral=True
        )

class ApplicationButton(Button):
    def __init__(self):
        super().__init__(
            label="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
            style=discord.ButtonStyle.primary,
            emoji="üìù"
        )
    
    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_modal(ApplicationForm())

class ApplicationView(View):
    def __init__(self, member: discord.Member = None, message: discord.Message = None):
        super().__init__(timeout=None)
        self.member = member
        self.message = message
        
        user_id = member.id if member else 0
        
        buttons = [
            Button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.success, custom_id=f"accept_{user_id}", emoji="‚úÖ"),
            Button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, custom_id=f"reject_{user_id}", emoji="‚ùå"),
            Button(label="–û–±–∑–≤–æ–Ω", style=discord.ButtonStyle.primary, custom_id=f"call_{user_id}", emoji="üìû")
        ]
        
        for btn in buttons:
            self.add_item(btn)

    async def interaction_check(self, interaction: discord.Interaction):
        if not any(role.id == RECRUITER_ROLE_ID for role in interaction.user.roles) and not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", ephemeral=True)
            return False
        return True

    async def accept_application(self, interaction: discord.Interaction):
        role = interaction.guild.get_role(ACCEPTED_ROLE_ID)
        if role:
            try:
                await self.member.add_roles(role)
            except discord.Forbidden:
                await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤)", ephemeral=True)
        
        embed = self.message.embeds[0]
        embed.add_field(
            name="–°—Ç–∞—Ç—É—Å",
            value=f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ {interaction.user.mention}",
            inline=False
        )
        
        await interaction.response.edit_message(embed=embed, view=None)
        
        try:
            embed = discord.Embed(
                title="üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!",
                description="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Hound!\n–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Ç–æ–º—É –∫—Ç–æ –≤–∞—Å –ø—Ä–∏–Ω—è–ª –∏–ª–∏ —Å—Ç–∞—Ä—à–µ–º—É —Å–æ—Å—Ç–∞–≤—É —Å–µ–º—å–∏.",
                color=0x2ecc71
            )
            embed.set_thumbnail(url=self.member.display_avatar.url)
            await self.member.send(embed=embed)
        except discord.Forbidden:
            await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∑–∞–∫—Ä—ã—Ç—ã–µ –õ–°)", ephemeral=True)
        
        await self.log_action(interaction, "–ü—Ä–∏–Ω—è—Ç–∞", 0x2ecc71)

    async def reject_application(self, interaction: discord.Interaction):
        embed = self.message.embeds[0]
        embed.add_field(
            name="–°—Ç–∞—Ç—É—Å",
            value=f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ {interaction.user.mention}",
            inline=False
        )
        
        await interaction.response.edit_message(embed=embed, view=None)
        
        try:
            embed = discord.Embed(
                title="üòï –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                description="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.",
                color=0xe74c3c
            )
            embed.set_thumbnail(url=self.member.display_avatar.url)
            await self.member.send(embed=embed)
        except discord.Forbidden:
            await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∑–∞–∫—Ä—ã—Ç—ã–µ –õ–°)", ephemeral=True)
        
        await self.log_action(interaction, "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞", 0xe74c3c)

    async def call_for_interview(self, interaction: discord.Interaction):
        await interaction.response.send_modal(CallModal(self))

    async def log_action(self, interaction, action, color):
        log_channel = bot.get_channel(LOGS_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(
                title=f"–ó–∞—è–≤–∫–∞ {action.lower()}",
                color=color,
                timestamp=datetime.now()
            )
            embed.add_field(name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=f"{self.member.mention} ({self.member.id})")
            embed.add_field(name="–†–µ–∫—Ä—É—Ç–µ—Ä", value=interaction.user.mention)
            embed.set_thumbnail(url=self.member.display_avatar.url)
            await log_channel.send(embed=embed)

class CallModal(Modal, title="–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–±–∑–≤–æ–Ω–∞"):
    time = TextInput(label="–§–æ—Ä–º–∞—Ç: 15:30 20.05.2024", placeholder="–ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì")
    
    def __init__(self, view: View):
        super().__init__()
        self.view = view

    async def on_submit(self, interaction: discord.Interaction):
        try:
            call_time = datetime.strptime(self.time.value, "%H:%M %d.%m.%Y")
            formatted_time = call_time.strftime("%d %B –≤ %H:%M")
            
            embed = self.view.message.embeds[0]
            embed.add_field(
                name="–°—Ç–∞—Ç—É—Å",
                value=f"üïí –í—ã–∑–≤–∞–Ω –Ω–∞ –æ–±–∑–≤–æ–Ω {interaction.user.mention}\n**–í—Ä–µ–º—è:** {formatted_time}",
                inline=False
            )
            
            self.view.clear_items()
            self.view.add_item(Button(
                label="–ü—Ä–∏–Ω—è—Ç—å",
                style=discord.ButtonStyle.success,
                custom_id=f"accept_{self.view.member.id}",
                emoji="‚úÖ"
            ))
            self.view.add_item(Button(
                label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                style=discord.ButtonStyle.danger,
                custom_id=f"reject_{self.view.member.id}",
                emoji="‚ùå"
            ))
            
            await interaction.response.edit_message(embed=embed, view=self.view)
            
            embed = discord.Embed(
                title="üìÖ –í–∞—Å –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –æ–±–∑–≤–æ–Ω",
                description=f"**–î–∞—Ç–∞:** {formatted_time}\n**–†–µ–∫—Ä—É—Ç–µ—Ä:** {interaction.user.mention}",
                color=0x3498db
            )
            await self.view.member.send(embed=embed)
            
        except ValueError:
            await interaction.response.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì",
                ephemeral=True
            )

@bot.hybrid_command(name="setup", description="–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏")
@commands.has_permissions(administrator=True)
async def setup(ctx: commands.Context):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    embed = discord.Embed(
        title="üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º–µ–π–Ω—ã–π Discord Hound!** üåü",
        description=(
            "–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π —Å–µ–º—å–∏? –£ –Ω–∞—Å –µ—Å—Ç—å –≤—Å—ë –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∏ —É—Å–ø–µ—Ö–∞:\n\n"
            "üöó **–ö—Ä—É—Ç–æ–π –∞–≤—Ç–æ–ø–∞—Ä–∫ –∏ —Å–µ–º–µ–π–Ω—ã–π –¥–æ–º**\n\n"
            "–í –Ω–∞—à–µ–º –≥–∞—Ä–∞–∂–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ –∫—Ä—É—Ç—ã–µ —Ç–∞—á–∫–∏\n\n"
            "üèÜ **–ü—Ä–µ–º–∏–∏ –¥–ª—è —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö**\n\n"
            "–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∂–∏–∑–Ω–∏ —Å–µ–º—å–∏  ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã! –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –≤–Ω–∏–º–∞–Ω–∏—è.\n\n"
            "ü§ù **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç –æ–ø—ã—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≥–æ—Å.—Å—Ç—Ä—É–∫—É—Ä**\n\n"
            "–ù–æ–≤–∏—á–∫–∏ ‚Äî –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –ù–∞—à–∏ —Å—Ç–∞—Ä–æ–∂–∏–ª—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º –æ—Å–≤–æ–∏—Ç—å—Å—è –∏ –¥–æ–±–∏—Ç—å—Å—è —É—Å–ø–µ—Ö–∞ –≤ –≥–æ—Å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö.\n\n"
            "üéâ **–û–±—â–µ–Ω–∏–µ —Å –∫—Ä—É—Ç—ã–º–∏ –ª—é–¥—å–º–∏**\n\n"
            "–º—ã –≤—Å–µ –¥–æ–±—Ä—ã–µ –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–µ –∏ –≥–æ—Ç–æ–≤—ã –æ–±—å—è—Å–Ω–∏—Ç—å –ø–æ—á—Ç–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ –¥–∞ –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å –±—É–¥–µ—Ç –∫–∞–ª—Å–Ω–æ) ‚Äî –∑–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –¥—Ä—É–∑–µ–π –∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤!\n\n"
            "üìã **–ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:**\n\n"
                "‚úî **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** ‚Äì –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ–Ω–ª–∞–π–Ω.\n"
                "‚úî **16+** (–º–æ–≥—É—Ç –±—ã—Ç—å –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è).\n"
                "‚úî** –ê–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å** ‚Äì –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–∏–µ –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.\n"
                "‚úî** –ö–æ–º–∞–Ω–¥–Ω—ã–π –¥—É—Ö** ‚Äì –±—É–¥—å –ø—Ä–æ—Å—Ç–æ —á–µ–ª–æ–≤–µ–∫–æ–º.\n\n"
                "**–ñ–¥—ë–º –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∏ —Å—Ç–∞–Ω—å —á–∞—Å—Ç—å—é Hound Family!** üêæüíõ\n\n"
        ),
        color=0x5865F2
    )
    embed.set_footer(text="–¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É")
    
    view = View()
    view.add_item(ApplicationButton())
    
    await ctx.send(embed=embed, view=view)

@bot.hybrid_command(name="apply", description="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
async def apply(ctx: commands.Context):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    if ctx.interaction:
        await ctx.interaction.response.send_modal(ApplicationForm())
    else:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ slash-–∫–æ–º–∞–Ω–¥—ã (/apply)")

@bot.event
async def on_interaction(interaction: discord.Interaction):
    if interaction.type == discord.InteractionType.component:
        custom_id = interaction.data["custom_id"]
        if custom_id.startswith(("accept_", "reject_", "call_")):
            action, user_id = custom_id.split('_')
            member = interaction.guild.get_member(int(user_id))
            
            if not member:
                await interaction.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
                return
            
            view = ApplicationView(member, interaction.message)
            
            if action == "accept":
                await view.accept_application(interaction)
            elif action == "reject":
                await view.reject_application(interaction)
            elif action == "call":
                await view.call_for_interview(interaction)

@bot.event
async def on_ready():
    print(f"–ë–æ—Ç {bot.user} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.add_view(ApplicationView())
    try:
        await bot.tree.sync()
        print("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

bot.run(config['token'])